module Alphametics (solve) where

import qualified Data.Map as Map
import Data.List ( delete, nub, transpose )
import Data.Char ( toUpper )
import Data.Maybe (fromMaybe, mapMaybe, listToMaybe, catMaybes)
import Control.Applicative (liftA2)
import Debug.Trace (traceShowId)


type PossibleChars = Map.Map Char [Int]

data Operator = Plus | Mult deriving Show
data Expr = Value String
          | Expr Operator Expr Expr
          deriving Show

data Equation = Equation { eExpr :: Expr 
                         , value :: String } deriving Show

solve :: String -> Maybe [(Char, Int)]
solve puzzle = error "You need to implement this function."


updateMap ::  PossibleChars -> [(Char, Int)] -> PossibleChars
updateMap = foldr (uncurry setChar)
        where setChar ch v = Map.mapWithKey (selector ch)
               where selector toChange key xs
                        | key == toChange = [v]
                        | key == ' ' = [0]
                        | otherwise = delete v xs

addChars :: String -> Char -> Int -> Map.Map Char [Int] -> [(Int, [(Char, Int)])]
addChars cs resChar carry charMap = let 
    as = fromMaybe [] $ mapM (`Map.lookup` charMap) cs
    resVals = fromMaybe [] $ resChar `Map.lookup` charMap
    valCombi = sequence as
             
    in [(c,  (resChar, resDig): zip cs v1) |
        v1 <- valCombi,
        let (c, resDig) = (`divMod` 10) . (carry +) $ sum v1,
        resDig `elem` resVals,
        (sum v1 `mod` 10) == resDig
        ]

-- >>> processFun addChars "DE" 'Y' 0 (initChars "SENDMOREMONEY")
-- [(0,fromList [(' ',[0]),('D',[]),('E',[]),('M',[1,2,3,4,5,6,7,8,9]),('N',[1,2,3,4,5,6,7,8,9]),('O',[1,2,3,4,5,6,7,8,9]),('R',[1,2,3,4,5,6,7,8,9]),('S',[1,2,3,4,5,6,7,8,9]),('Y',[0])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[2,3,4,5,6,7,8,9]),('N',[2,3,4,5,6,7,8,9]),('O',[2,3,4,5,6,7,8,9]),('R',[2,3,4,5,6,7,8,9]),('S',[2,3,4,5,6,7,8,9]),('Y',[1])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[1,3,4,5,6,7,8,9]),('N',[1,3,4,5,6,7,8,9]),('O',[1,3,4,5,6,7,8,9]),('R',[1,3,4,5,6,7,8,9]),('S',[1,3,4,5,6,7,8,9]),('Y',[2])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[1,2,4,5,6,7,8,9]),('N',[1,2,4,5,6,7,8,9]),('O',[1,2,4,5,6,7,8,9]),('R',[1,2,4,5,6,7,8,9]),('S',[1,2,4,5,6,7,8,9]),('Y',[3])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[1,2,3,5,6,7,8,9]),('N',[1,2,3,5,6,7,8,9]),('O',[1,2,3,5,6,7,8,9]),('R',[1,2,3,5,6,7,8,9]),('S',[1,2,3,5,6,7,8,9]),('Y',[4])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[1,2,3,4,6,7,8,9]),('N',[1,2,3,4,6,7,8,9]),('O',[1,2,3,4,6,7,8,9]),('R',[1,2,3,4,6,7,8,9]),('S',[1,2,3,4,6,7,8,9]),('Y',[5])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[1,2,3,4,5,7,8,9]),('N',[1,2,3,4,5,7,8,9]),('O',[1,2,3,4,5,7,8,9]),('R',[1,2,3,4,5,7,8,9]),('S',[1,2,3,4,5,7,8,9]),('Y',[6])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[1,2,3,4,5,6,8,9]),('N',[1,2,3,4,5,6,8,9]),('O',[1,2,3,4,5,6,8,9]),('R',[1,2,3,4,5,6,8,9]),('S',[1,2,3,4,5,6,8,9]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[1,2,3,4,5,6,7,9]),('N',[1,2,3,4,5,6,7,9]),('O',[1,2,3,4,5,6,7,9]),('R',[1,2,3,4,5,6,7,9]),('S',[1,2,3,4,5,6,7,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[0]),('E',[]),('M',[1,2,3,4,5,6,7,8]),('N',[1,2,3,4,5,6,7,8]),('O',[1,2,3,4,5,6,7,8]),('R',[1,2,3,4,5,6,7,8]),('S',[1,2,3,4,5,6,7,8]),('Y',[9])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[2,3,4,5,6,7,8,9]),('N',[2,3,4,5,6,7,8,9]),('O',[2,3,4,5,6,7,8,9]),('R',[2,3,4,5,6,7,8,9]),('S',[2,3,4,5,6,7,8,9]),('Y',[1])]),(0,fromList [(' ',[0]),('D',[1]),('E',[]),('M',[0,3,4,5,6,7,8,9]),('N',[0,3,4,5,6,7,8,9]),('O',[0,3,4,5,6,7,8,9]),('R',[0,3,4,5,6,7,8,9]),('S',[0,3,4,5,6,7,8,9]),('Y',[2])]),(0,fromList [(' ',[0]),('D',[1]),('E',[2]),('M',[0,4,5,6,7,8,9]),('N',[0,4,5,6,7,8,9]),('O',[0,4,5,6,7,8,9]),('R',[0,4,5,6,7,8,9]),('S',[0,4,5,6,7,8,9]),('Y',[3])]),(0,fromList [(' ',[0]),('D',[1]),('E',[3]),('M',[0,2,5,6,7,8,9]),('N',[0,2,5,6,7,8,9]),('O',[0,2,5,6,7,8,9]),('R',[0,2,5,6,7,8,9]),('S',[0,2,5,6,7,8,9]),('Y',[4])]),(0,fromList [(' ',[0]),('D',[1]),('E',[4]),('M',[0,2,3,6,7,8,9]),('N',[0,2,3,6,7,8,9]),('O',[0,2,3,6,7,8,9]),('R',[0,2,3,6,7,8,9]),('S',[0,2,3,6,7,8,9]),('Y',[5])]),(0,fromList [(' ',[0]),('D',[1]),('E',[5]),('M',[0,2,3,4,7,8,9]),('N',[0,2,3,4,7,8,9]),('O',[0,2,3,4,7,8,9]),('R',[0,2,3,4,7,8,9]),('S',[0,2,3,4,7,8,9]),('Y',[6])]),(0,fromList [(' ',[0]),('D',[1]),('E',[6]),('M',[0,2,3,4,5,8,9]),('N',[0,2,3,4,5,8,9]),('O',[0,2,3,4,5,8,9]),('R',[0,2,3,4,5,8,9]),('S',[0,2,3,4,5,8,9]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[1]),('E',[7]),('M',[0,2,3,4,5,6,9]),('N',[0,2,3,4,5,6,9]),('O',[0,2,3,4,5,6,9]),('R',[0,2,3,4,5,6,9]),('S',[0,2,3,4,5,6,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[1]),('E',[8]),('M',[0,2,3,4,5,6,7]),('N',[0,2,3,4,5,6,7]),('O',[0,2,3,4,5,6,7]),('R',[0,2,3,4,5,6,7]),('S',[0,2,3,4,5,6,7]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[1]),('E',[9]),('M',[2,3,4,5,6,7,8]),('N',[2,3,4,5,6,7,8]),('O',[2,3,4,5,6,7,8]),('R',[2,3,4,5,6,7,8]),('S',[2,3,4,5,6,7,8]),('Y',[0])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[1,3,4,5,6,7,8,9]),('N',[1,3,4,5,6,7,8,9]),('O',[1,3,4,5,6,7,8,9]),('R',[1,3,4,5,6,7,8,9]),('S',[1,3,4,5,6,7,8,9]),('Y',[2])]),(0,fromList [(' ',[0]),('D',[2]),('E',[1]),('M',[0,4,5,6,7,8,9]),('N',[0,4,5,6,7,8,9]),('O',[0,4,5,6,7,8,9]),('R',[0,4,5,6,7,8,9]),('S',[0,4,5,6,7,8,9]),('Y',[3])]),(0,fromList [(' ',[0]),('D',[2]),('E',[]),('M',[0,1,3,5,6,7,8,9]),('N',[0,1,3,5,6,7,8,9]),('O',[0,1,3,5,6,7,8,9]),('R',[0,1,3,5,6,7,8,9]),('S',[0,1,3,5,6,7,8,9]),('Y',[4])]),(0,fromList [(' ',[0]),('D',[2]),('E',[3]),('M',[0,1,4,6,7,8,9]),('N',[0,1,4,6,7,8,9]),('O',[0,1,4,6,7,8,9]),('R',[0,1,4,6,7,8,9]),('S',[0,1,4,6,7,8,9]),('Y',[5])]),(0,fromList [(' ',[0]),('D',[2]),('E',[4]),('M',[0,1,3,5,7,8,9]),('N',[0,1,3,5,7,8,9]),('O',[0,1,3,5,7,8,9]),('R',[0,1,3,5,7,8,9]),('S',[0,1,3,5,7,8,9]),('Y',[6])]),(0,fromList [(' ',[0]),('D',[2]),('E',[5]),('M',[0,1,3,4,6,8,9]),('N',[0,1,3,4,6,8,9]),('O',[0,1,3,4,6,8,9]),('R',[0,1,3,4,6,8,9]),('S',[0,1,3,4,6,8,9]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[2]),('E',[6]),('M',[0,1,3,4,5,7,9]),('N',[0,1,3,4,5,7,9]),('O',[0,1,3,4,5,7,9]),('R',[0,1,3,4,5,7,9]),('S',[0,1,3,4,5,7,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[2]),('E',[7]),('M',[0,1,3,4,5,6,8]),('N',[0,1,3,4,5,6,8]),('O',[0,1,3,4,5,6,8]),('R',[0,1,3,4,5,6,8]),('S',[0,1,3,4,5,6,8]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[2]),('E',[8]),('M',[1,3,4,5,6,7,9]),('N',[1,3,4,5,6,7,9]),('O',[1,3,4,5,6,7,9]),('R',[1,3,4,5,6,7,9]),('S',[1,3,4,5,6,7,9]),('Y',[0])]),(1,fromList [(' ',[0]),('D',[2]),('E',[9]),('M',[0,3,4,5,6,7,8]),('N',[0,3,4,5,6,7,8]),('O',[0,3,4,5,6,7,8]),('R',[0,3,4,5,6,7,8]),('S',[0,3,4,5,6,7,8]),('Y',[1])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[1,2,4,5,6,7,8,9]),('N',[1,2,4,5,6,7,8,9]),('O',[1,2,4,5,6,7,8,9]),('R',[1,2,4,5,6,7,8,9]),('S',[1,2,4,5,6,7,8,9]),('Y',[3])]),(0,fromList [(' ',[0]),('D',[3]),('E',[1]),('M',[0,2,5,6,7,8,9]),('N',[0,2,5,6,7,8,9]),('O',[0,2,5,6,7,8,9]),('R',[0,2,5,6,7,8,9]),('S',[0,2,5,6,7,8,9]),('Y',[4])]),(0,fromList [(' ',[0]),('D',[3]),('E',[2]),('M',[0,1,4,6,7,8,9]),('N',[0,1,4,6,7,8,9]),('O',[0,1,4,6,7,8,9]),('R',[0,1,4,6,7,8,9]),('S',[0,1,4,6,7,8,9]),('Y',[5])]),(0,fromList [(' ',[0]),('D',[3]),('E',[]),('M',[0,1,2,4,5,7,8,9]),('N',[0,1,2,4,5,7,8,9]),('O',[0,1,2,4,5,7,8,9]),('R',[0,1,2,4,5,7,8,9]),('S',[0,1,2,4,5,7,8,9]),('Y',[6])]),(0,fromList [(' ',[0]),('D',[3]),('E',[4]),('M',[0,1,2,5,6,8,9]),('N',[0,1,2,5,6,8,9]),('O',[0,1,2,5,6,8,9]),('R',[0,1,2,5,6,8,9]),('S',[0,1,2,5,6,8,9]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[3]),('E',[5]),('M',[0,1,2,4,6,7,9]),('N',[0,1,2,4,6,7,9]),('O',[0,1,2,4,6,7,9]),('R',[0,1,2,4,6,7,9]),('S',[0,1,2,4,6,7,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[3]),('E',[6]),('M',[0,1,2,4,5,7,8]),('N',[0,1,2,4,5,7,8]),('O',[0,1,2,4,5,7,8]),('R',[0,1,2,4,5,7,8]),('S',[0,1,2,4,5,7,8]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[3]),('E',[7]),('M',[1,2,4,5,6,8,9]),('N',[1,2,4,5,6,8,9]),('O',[1,2,4,5,6,8,9]),('R',[1,2,4,5,6,8,9]),('S',[1,2,4,5,6,8,9]),('Y',[0])]),(1,fromList [(' ',[0]),('D',[3]),('E',[8]),('M',[0,2,4,5,6,7,9]),('N',[0,2,4,5,6,7,9]),('O',[0,2,4,5,6,7,9]),('R',[0,2,4,5,6,7,9]),('S',[0,2,4,5,6,7,9]),('Y',[1])]),(1,fromList [(' ',[0]),('D',[3]),('E',[9]),('M',[0,1,4,5,6,7,8]),('N',[0,1,4,5,6,7,8]),('O',[0,1,4,5,6,7,8]),('R',[0,1,4,5,6,7,8]),('S',[0,1,4,5,6,7,8]),('Y',[2])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[1,2,3,5,6,7,8,9]),('N',[1,2,3,5,6,7,8,9]),('O',[1,2,3,5,6,7,8,9]),('R',[1,2,3,5,6,7,8,9]),('S',[1,2,3,5,6,7,8,9]),('Y',[4])]),(0,fromList [(' ',[0]),('D',[4]),('E',[1]),('M',[0,2,3,6,7,8,9]),('N',[0,2,3,6,7,8,9]),('O',[0,2,3,6,7,8,9]),('R',[0,2,3,6,7,8,9]),('S',[0,2,3,6,7,8,9]),('Y',[5])]),(0,fromList [(' ',[0]),('D',[4]),('E',[2]),('M',[0,1,3,5,7,8,9]),('N',[0,1,3,5,7,8,9]),('O',[0,1,3,5,7,8,9]),('R',[0,1,3,5,7,8,9]),('S',[0,1,3,5,7,8,9]),('Y',[6])]),(0,fromList [(' ',[0]),('D',[4]),('E',[3]),('M',[0,1,2,5,6,8,9]),('N',[0,1,2,5,6,8,9]),('O',[0,1,2,5,6,8,9]),('R',[0,1,2,5,6,8,9]),('S',[0,1,2,5,6,8,9]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[4]),('E',[]),('M',[0,1,2,3,5,6,7,9]),('N',[0,1,2,3,5,6,7,9]),('O',[0,1,2,3,5,6,7,9]),('R',[0,1,2,3,5,6,7,9]),('S',[0,1,2,3,5,6,7,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[4]),('E',[5]),('M',[0,1,2,3,6,7,8]),('N',[0,1,2,3,6,7,8]),('O',[0,1,2,3,6,7,8]),('R',[0,1,2,3,6,7,8]),('S',[0,1,2,3,6,7,8]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[4]),('E',[6]),('M',[1,2,3,5,7,8,9]),('N',[1,2,3,5,7,8,9]),('O',[1,2,3,5,7,8,9]),('R',[1,2,3,5,7,8,9]),('S',[1,2,3,5,7,8,9]),('Y',[0])]),(1,fromList [(' ',[0]),('D',[4]),('E',[7]),('M',[0,2,3,5,6,8,9]),('N',[0,2,3,5,6,8,9]),('O',[0,2,3,5,6,8,9]),('R',[0,2,3,5,6,8,9]),('S',[0,2,3,5,6,8,9]),('Y',[1])]),(1,fromList [(' ',[0]),('D',[4]),('E',[8]),('M',[0,1,3,5,6,7,9]),('N',[0,1,3,5,6,7,9]),('O',[0,1,3,5,6,7,9]),('R',[0,1,3,5,6,7,9]),('S',[0,1,3,5,6,7,9]),('Y',[2])]),(1,fromList [(' ',[0]),('D',[4]),('E',[9]),('M',[0,1,2,5,6,7,8]),('N',[0,1,2,5,6,7,8]),('O',[0,1,2,5,6,7,8]),('R',[0,1,2,5,6,7,8]),('S',[0,1,2,5,6,7,8]),('Y',[3])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[1,2,3,4,6,7,8,9]),('N',[1,2,3,4,6,7,8,9]),('O',[1,2,3,4,6,7,8,9]),('R',[1,2,3,4,6,7,8,9]),('S',[1,2,3,4,6,7,8,9]),('Y',[5])]),(0,fromList [(' ',[0]),('D',[5]),('E',[1]),('M',[0,2,3,4,7,8,9]),('N',[0,2,3,4,7,8,9]),('O',[0,2,3,4,7,8,9]),('R',[0,2,3,4,7,8,9]),('S',[0,2,3,4,7,8,9]),('Y',[6])]),(0,fromList [(' ',[0]),('D',[5]),('E',[2]),('M',[0,1,3,4,6,8,9]),('N',[0,1,3,4,6,8,9]),('O',[0,1,3,4,6,8,9]),('R',[0,1,3,4,6,8,9]),('S',[0,1,3,4,6,8,9]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[5]),('E',[3]),('M',[0,1,2,4,6,7,9]),('N',[0,1,2,4,6,7,9]),('O',[0,1,2,4,6,7,9]),('R',[0,1,2,4,6,7,9]),('S',[0,1,2,4,6,7,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[5]),('E',[4]),('M',[0,1,2,3,6,7,8]),('N',[0,1,2,3,6,7,8]),('O',[0,1,2,3,6,7,8]),('R',[0,1,2,3,6,7,8]),('S',[0,1,2,3,6,7,8]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[5]),('E',[]),('M',[1,2,3,4,6,7,8,9]),('N',[1,2,3,4,6,7,8,9]),('O',[1,2,3,4,6,7,8,9]),('R',[1,2,3,4,6,7,8,9]),('S',[1,2,3,4,6,7,8,9]),('Y',[0])]),(1,fromList [(' ',[0]),('D',[5]),('E',[6]),('M',[0,2,3,4,7,8,9]),('N',[0,2,3,4,7,8,9]),('O',[0,2,3,4,7,8,9]),('R',[0,2,3,4,7,8,9]),('S',[0,2,3,4,7,8,9]),('Y',[1])]),(1,fromList [(' ',[0]),('D',[5]),('E',[7]),('M',[0,1,3,4,6,8,9]),('N',[0,1,3,4,6,8,9]),('O',[0,1,3,4,6,8,9]),('R',[0,1,3,4,6,8,9]),('S',[0,1,3,4,6,8,9]),('Y',[2])]),(1,fromList [(' ',[0]),('D',[5]),('E',[8]),('M',[0,1,2,4,6,7,9]),('N',[0,1,2,4,6,7,9]),('O',[0,1,2,4,6,7,9]),('R',[0,1,2,4,6,7,9]),('S',[0,1,2,4,6,7,9]),('Y',[3])]),(1,fromList [(' ',[0]),('D',[5]),('E',[9]),('M',[0,1,2,3,6,7,8]),('N',[0,1,2,3,6,7,8]),('O',[0,1,2,3,6,7,8]),('R',[0,1,2,3,6,7,8]),('S',[0,1,2,3,6,7,8]),('Y',[4])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[1,2,3,4,5,7,8,9]),('N',[1,2,3,4,5,7,8,9]),('O',[1,2,3,4,5,7,8,9]),('R',[1,2,3,4,5,7,8,9]),('S',[1,2,3,4,5,7,8,9]),('Y',[6])]),(0,fromList [(' ',[0]),('D',[6]),('E',[1]),('M',[0,2,3,4,5,8,9]),('N',[0,2,3,4,5,8,9]),('O',[0,2,3,4,5,8,9]),('R',[0,2,3,4,5,8,9]),('S',[0,2,3,4,5,8,9]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[6]),('E',[2]),('M',[0,1,3,4,5,7,9]),('N',[0,1,3,4,5,7,9]),('O',[0,1,3,4,5,7,9]),('R',[0,1,3,4,5,7,9]),('S',[0,1,3,4,5,7,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[6]),('E',[3]),('M',[0,1,2,4,5,7,8]),('N',[0,1,2,4,5,7,8]),('O',[0,1,2,4,5,7,8]),('R',[0,1,2,4,5,7,8]),('S',[0,1,2,4,5,7,8]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[6]),('E',[4]),('M',[1,2,3,5,7,8,9]),('N',[1,2,3,5,7,8,9]),('O',[1,2,3,5,7,8,9]),('R',[1,2,3,5,7,8,9]),('S',[1,2,3,5,7,8,9]),('Y',[0])]),(1,fromList [(' ',[0]),('D',[6]),('E',[5]),('M',[0,2,3,4,7,8,9]),('N',[0,2,3,4,7,8,9]),('O',[0,2,3,4,7,8,9]),('R',[0,2,3,4,7,8,9]),('S',[0,2,3,4,7,8,9]),('Y',[1])]),(1,fromList [(' ',[0]),('D',[6]),('E',[]),('M',[0,1,3,4,5,7,8,9]),('N',[0,1,3,4,5,7,8,9]),('O',[0,1,3,4,5,7,8,9]),('R',[0,1,3,4,5,7,8,9]),('S',[0,1,3,4,5,7,8,9]),('Y',[2])]),(1,fromList [(' ',[0]),('D',[6]),('E',[7]),('M',[0,1,2,4,5,8,9]),('N',[0,1,2,4,5,8,9]),('O',[0,1,2,4,5,8,9]),('R',[0,1,2,4,5,8,9]),('S',[0,1,2,4,5,8,9]),('Y',[3])]),(1,fromList [(' ',[0]),('D',[6]),('E',[8]),('M',[0,1,2,3,5,7,9]),('N',[0,1,2,3,5,7,9]),('O',[0,1,2,3,5,7,9]),('R',[0,1,2,3,5,7,9]),('S',[0,1,2,3,5,7,9]),('Y',[4])]),(1,fromList [(' ',[0]),('D',[6]),('E',[9]),('M',[0,1,2,3,4,7,8]),('N',[0,1,2,3,4,7,8]),('O',[0,1,2,3,4,7,8]),('R',[0,1,2,3,4,7,8]),('S',[0,1,2,3,4,7,8]),('Y',[5])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[1,2,3,4,5,6,8,9]),('N',[1,2,3,4,5,6,8,9]),('O',[1,2,3,4,5,6,8,9]),('R',[1,2,3,4,5,6,8,9]),('S',[1,2,3,4,5,6,8,9]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[7]),('E',[1]),('M',[0,2,3,4,5,6,9]),('N',[0,2,3,4,5,6,9]),('O',[0,2,3,4,5,6,9]),('R',[0,2,3,4,5,6,9]),('S',[0,2,3,4,5,6,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[7]),('E',[2]),('M',[0,1,3,4,5,6,8]),('N',[0,1,3,4,5,6,8]),('O',[0,1,3,4,5,6,8]),('R',[0,1,3,4,5,6,8]),('S',[0,1,3,4,5,6,8]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[7]),('E',[3]),('M',[1,2,4,5,6,8,9]),('N',[1,2,4,5,6,8,9]),('O',[1,2,4,5,6,8,9]),('R',[1,2,4,5,6,8,9]),('S',[1,2,4,5,6,8,9]),('Y',[0])]),(1,fromList [(' ',[0]),('D',[7]),('E',[4]),('M',[0,2,3,5,6,8,9]),('N',[0,2,3,5,6,8,9]),('O',[0,2,3,5,6,8,9]),('R',[0,2,3,5,6,8,9]),('S',[0,2,3,5,6,8,9]),('Y',[1])]),(1,fromList [(' ',[0]),('D',[7]),('E',[5]),('M',[0,1,3,4,6,8,9]),('N',[0,1,3,4,6,8,9]),('O',[0,1,3,4,6,8,9]),('R',[0,1,3,4,6,8,9]),('S',[0,1,3,4,6,8,9]),('Y',[2])]),(1,fromList [(' ',[0]),('D',[7]),('E',[6]),('M',[0,1,2,4,5,8,9]),('N',[0,1,2,4,5,8,9]),('O',[0,1,2,4,5,8,9]),('R',[0,1,2,4,5,8,9]),('S',[0,1,2,4,5,8,9]),('Y',[3])]),(1,fromList [(' ',[0]),('D',[7]),('E',[]),('M',[0,1,2,3,5,6,8,9]),('N',[0,1,2,3,5,6,8,9]),('O',[0,1,2,3,5,6,8,9]),('R',[0,1,2,3,5,6,8,9]),('S',[0,1,2,3,5,6,8,9]),('Y',[4])]),(1,fromList [(' ',[0]),('D',[7]),('E',[8]),('M',[0,1,2,3,4,6,9]),('N',[0,1,2,3,4,6,9]),('O',[0,1,2,3,4,6,9]),('R',[0,1,2,3,4,6,9]),('S',[0,1,2,3,4,6,9]),('Y',[5])]),(1,fromList [(' ',[0]),('D',[7]),('E',[9]),('M',[0,1,2,3,4,5,8]),('N',[0,1,2,3,4,5,8]),('O',[0,1,2,3,4,5,8]),('R',[0,1,2,3,4,5,8]),('S',[0,1,2,3,4,5,8]),('Y',[6])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[1,2,3,4,5,6,7,9]),('N',[1,2,3,4,5,6,7,9]),('O',[1,2,3,4,5,6,7,9]),('R',[1,2,3,4,5,6,7,9]),('S',[1,2,3,4,5,6,7,9]),('Y',[8])]),(0,fromList [(' ',[0]),('D',[8]),('E',[1]),('M',[0,2,3,4,5,6,7]),('N',[0,2,3,4,5,6,7]),('O',[0,2,3,4,5,6,7]),('R',[0,2,3,4,5,6,7]),('S',[0,2,3,4,5,6,7]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[8]),('E',[2]),('M',[1,3,4,5,6,7,9]),('N',[1,3,4,5,6,7,9]),('O',[1,3,4,5,6,7,9]),('R',[1,3,4,5,6,7,9]),('S',[1,3,4,5,6,7,9]),('Y',[0])]),(1,fromList [(' ',[0]),('D',[8]),('E',[3]),('M',[0,2,4,5,6,7,9]),('N',[0,2,4,5,6,7,9]),('O',[0,2,4,5,6,7,9]),('R',[0,2,4,5,6,7,9]),('S',[0,2,4,5,6,7,9]),('Y',[1])]),(1,fromList [(' ',[0]),('D',[8]),('E',[4]),('M',[0,1,3,5,6,7,9]),('N',[0,1,3,5,6,7,9]),('O',[0,1,3,5,6,7,9]),('R',[0,1,3,5,6,7,9]),('S',[0,1,3,5,6,7,9]),('Y',[2])]),(1,fromList [(' ',[0]),('D',[8]),('E',[5]),('M',[0,1,2,4,6,7,9]),('N',[0,1,2,4,6,7,9]),('O',[0,1,2,4,6,7,9]),('R',[0,1,2,4,6,7,9]),('S',[0,1,2,4,6,7,9]),('Y',[3])]),(1,fromList [(' ',[0]),('D',[8]),('E',[6]),('M',[0,1,2,3,5,7,9]),('N',[0,1,2,3,5,7,9]),('O',[0,1,2,3,5,7,9]),('R',[0,1,2,3,5,7,9]),('S',[0,1,2,3,5,7,9]),('Y',[4])]),(1,fromList [(' ',[0]),('D',[8]),('E',[7]),('M',[0,1,2,3,4,6,9]),('N',[0,1,2,3,4,6,9]),('O',[0,1,2,3,4,6,9]),('R',[0,1,2,3,4,6,9]),('S',[0,1,2,3,4,6,9]),('Y',[5])]),(1,fromList [(' ',[0]),('D',[8]),('E',[]),('M',[0,1,2,3,4,5,7,9]),('N',[0,1,2,3,4,5,7,9]),('O',[0,1,2,3,4,5,7,9]),('R',[0,1,2,3,4,5,7,9]),('S',[0,1,2,3,4,5,7,9]),('Y',[6])]),(1,fromList [(' ',[0]),('D',[8]),('E',[9]),('M',[0,1,2,3,4,5,6]),('N',[0,1,2,3,4,5,6]),('O',[0,1,2,3,4,5,6]),('R',[0,1,2,3,4,5,6]),('S',[0,1,2,3,4,5,6]),('Y',[7])]),(0,fromList [(' ',[0]),('D',[]),('E',[0]),('M',[1,2,3,4,5,6,7,8]),('N',[1,2,3,4,5,6,7,8]),('O',[1,2,3,4,5,6,7,8]),('R',[1,2,3,4,5,6,7,8]),('S',[1,2,3,4,5,6,7,8]),('Y',[9])]),(1,fromList [(' ',[0]),('D',[9]),('E',[1]),('M',[2,3,4,5,6,7,8]),('N',[2,3,4,5,6,7,8]),('O',[2,3,4,5,6,7,8]),('R',[2,3,4,5,6,7,8]),('S',[2,3,4,5,6,7,8]),('Y',[0])]),(1,fromList [(' ',[0]),('D',[9]),('E',[2]),('M',[0,3,4,5,6,7,8]),('N',[0,3,4,5,6,7,8]),('O',[0,3,4,5,6,7,8]),('R',[0,3,4,5,6,7,8]),('S',[0,3,4,5,6,7,8]),('Y',[1])]),(1,fromList [(' ',[0]),('D',[9]),('E',[3]),('M',[0,1,4,5,6,7,8]),('N',[0,1,4,5,6,7,8]),('O',[0,1,4,5,6,7,8]),('R',[0,1,4,5,6,7,8]),('S',[0,1,4,5,6,7,8]),('Y',[2])]),(1,fromList [(' ',[0]),('D',[9]),('E',[4]),('M',[0,1,2,5,6,7,8]),('N',[0,1,2,5,6,7,8]),('O',[0,1,2,5,6,7,8]),('R',[0,1,2,5,6,7,8]),('S',[0,1,2,5,6,7,8]),('Y',[3])]),(1,fromList [(' ',[0]),('D',[9]),('E',[5]),('M',[0,1,2,3,6,7,8]),('N',[0,1,2,3,6,7,8]),('O',[0,1,2,3,6,7,8]),('R',[0,1,2,3,6,7,8]),('S',[0,1,2,3,6,7,8]),('Y',[4])]),(1,fromList [(' ',[0]),('D',[9]),('E',[6]),('M',[0,1,2,3,4,7,8]),('N',[0,1,2,3,4,7,8]),('O',[0,1,2,3,4,7,8]),('R',[0,1,2,3,4,7,8]),('S',[0,1,2,3,4,7,8]),('Y',[5])]),(1,fromList [(' ',[0]),('D',[9]),('E',[7]),('M',[0,1,2,3,4,5,8]),('N',[0,1,2,3,4,5,8]),('O',[0,1,2,3,4,5,8]),('R',[0,1,2,3,4,5,8]),('S',[0,1,2,3,4,5,8]),('Y',[6])]),(1,fromList [(' ',[0]),('D',[9]),('E',[8]),('M',[0,1,2,3,4,5,6]),('N',[0,1,2,3,4,5,6]),('O',[0,1,2,3,4,5,6]),('R',[0,1,2,3,4,5,6]),('S',[0,1,2,3,4,5,6]),('Y',[7])]),(1,fromList [(' ',[0]),('D',[9]),('E',[]),('M',[0,1,2,3,4,5,6,7]),('N',[0,1,2,3,4,5,6,7]),('O',[0,1,2,3,4,5,6,7]),('R',[0,1,2,3,4,5,6,7]),('S',[0,1,2,3,4,5,6,7]),('Y',[8])])]
processFun :: (String -> Char  -> Int  -> PossibleChars  -> [(Int, [(Char, Int)])]) 
              -> String -> Char -> Int -> PossibleChars -> [(Int, PossibleChars)]
processFun f str ch car charMap = let 
        results = f str ch car charMap
     in (\ (c, pcs) -> (c, updateMap charMap pcs)) <$> results


loop = go 0
    where go _ _ _ [] mp = pure mp
          go _ _ [] _ mp = pure mp
          go carry f (s:strs) (c:chrs) charMap = let 
            carryRes = processFun f s c carry charMap
            in concatMap (\(newCar, newMap) -> go newCar f strs chrs newMap) carryRes

standardiseInps :: [String] -> String -> ([String], String)
standardiseInps inps res = (transpose lined, normaledRes)
    where (normaledRes: lined) = map (reverse . addPadding padAmount) (res:inps)
          padAmount = maximum . map length $ (res:inps)
          addPadding amount x = replicate (amount - length x) ' ' ++ x

-- >>> pairColumns ["SEND","MORE"] "MONEY"
-- (["DE","NR","EO","SM","  "],"YENOM")
pairColumns :: [String] -> String -> ([String], [Char])
pairColumns inps = unzip . uncurry zip . standardiseInps inps

allUnique :: Eq a => [a] -> Bool
allUnique [] = True
allUnique (x:xs) = x `notElem` xs && allUnique xs


initChars :: [Char] -> Map.Map Char [Int]
initChars xs = Map.insert ' ' [0] $ foldr initiator Map.empty (nub xs :: String)
        where initiator x = Map.insert x [0..9]

-- >>> addChars "DE" 'Y' 0 (initChars "SENDMOREMONEY")
-- [(0,[('Y',0),('D',0),('E',0)]),(0,[('Y',1),('D',0),('E',1)]),(0,[('Y',2),('D',0),('E',2)]),(0,[('Y',3),('D',0),('E',3)]),(0,[('Y',4),('D',0),('E',4)]),(0,[('Y',5),('D',0),('E',5)]),(0,[('Y',6),('D',0),('E',6)]),(0,[('Y',7),('D',0),('E',7)]),(0,[('Y',8),('D',0),('E',8)]),(0,[('Y',9),('D',0),('E',9)]),(0,[('Y',1),('D',1),('E',0)]),(0,[('Y',2),('D',1),('E',1)]),(0,[('Y',3),('D',1),('E',2)]),(0,[('Y',4),('D',1),('E',3)]),(0,[('Y',5),('D',1),('E',4)]),(0,[('Y',6),('D',1),('E',5)]),(0,[('Y',7),('D',1),('E',6)]),(0,[('Y',8),('D',1),('E',7)]),(0,[('Y',9),('D',1),('E',8)]),(1,[('Y',0),('D',1),('E',9)]),(0,[('Y',2),('D',2),('E',0)]),(0,[('Y',3),('D',2),('E',1)]),(0,[('Y',4),('D',2),('E',2)]),(0,[('Y',5),('D',2),('E',3)]),(0,[('Y',6),('D',2),('E',4)]),(0,[('Y',7),('D',2),('E',5)]),(0,[('Y',8),('D',2),('E',6)]),(0,[('Y',9),('D',2),('E',7)]),(1,[('Y',0),('D',2),('E',8)]),(1,[('Y',1),('D',2),('E',9)]),(0,[('Y',3),('D',3),('E',0)]),(0,[('Y',4),('D',3),('E',1)]),(0,[('Y',5),('D',3),('E',2)]),(0,[('Y',6),('D',3),('E',3)]),(0,[('Y',7),('D',3),('E',4)]),(0,[('Y',8),('D',3),('E',5)]),(0,[('Y',9),('D',3),('E',6)]),(1,[('Y',0),('D',3),('E',7)]),(1,[('Y',1),('D',3),('E',8)]),(1,[('Y',2),('D',3),('E',9)]),(0,[('Y',4),('D',4),('E',0)]),(0,[('Y',5),('D',4),('E',1)]),(0,[('Y',6),('D',4),('E',2)]),(0,[('Y',7),('D',4),('E',3)]),(0,[('Y',8),('D',4),('E',4)]),(0,[('Y',9),('D',4),('E',5)]),(1,[('Y',0),('D',4),('E',6)]),(1,[('Y',1),('D',4),('E',7)]),(1,[('Y',2),('D',4),('E',8)]),(1,[('Y',3),('D',4),('E',9)]),(0,[('Y',5),('D',5),('E',0)]),(0,[('Y',6),('D',5),('E',1)]),(0,[('Y',7),('D',5),('E',2)]),(0,[('Y',8),('D',5),('E',3)]),(0,[('Y',9),('D',5),('E',4)]),(1,[('Y',0),('D',5),('E',5)]),(1,[('Y',1),('D',5),('E',6)]),(1,[('Y',2),('D',5),('E',7)]),(1,[('Y',3),('D',5),('E',8)]),(1,[('Y',4),('D',5),('E',9)]),(0,[('Y',6),('D',6),('E',0)]),(0,[('Y',7),('D',6),('E',1)]),(0,[('Y',8),('D',6),('E',2)]),(0,[('Y',9),('D',6),('E',3)]),(1,[('Y',0),('D',6),('E',4)]),(1,[('Y',1),('D',6),('E',5)]),(1,[('Y',2),('D',6),('E',6)]),(1,[('Y',3),('D',6),('E',7)]),(1,[('Y',4),('D',6),('E',8)]),(1,[('Y',5),('D',6),('E',9)]),(0,[('Y',7),('D',7),('E',0)]),(0,[('Y',8),('D',7),('E',1)]),(0,[('Y',9),('D',7),('E',2)]),(1,[('Y',0),('D',7),('E',3)]),(1,[('Y',1),('D',7),('E',4)]),(1,[('Y',2),('D',7),('E',5)]),(1,[('Y',3),('D',7),('E',6)]),(1,[('Y',4),('D',7),('E',7)]),(1,[('Y',5),('D',7),('E',8)]),(1,[('Y',6),('D',7),('E',9)]),(0,[('Y',8),('D',8),('E',0)]),(0,[('Y',9),('D',8),('E',1)]),(1,[('Y',0),('D',8),('E',2)]),(1,[('Y',1),('D',8),('E',3)]),(1,[('Y',2),('D',8),('E',4)]),(1,[('Y',3),('D',8),('E',5)]),(1,[('Y',4),('D',8),('E',6)]),(1,[('Y',5),('D',8),('E',7)]),(1,[('Y',6),('D',8),('E',8)]),(1,[('Y',7),('D',8),('E',9)]),(0,[('Y',9),('D',9),('E',0)]),(1,[('Y',0),('D',9),('E',1)]),(1,[('Y',1),('D',9),('E',2)]),(1,[('Y',2),('D',9),('E',3)]),(1,[('Y',3),('D',9),('E',4)]),(1,[('Y',4),('D',9),('E',5)]),(1,[('Y',5),('D',9),('E',6)]),(1,[('Y',6),('D',9),('E',7)]),(1,[('Y',7),('D',9),('E',8)]),(1,[('Y',8),('D',9),('E',9)])]

-- >>> testInp 
-- []
testInp = loop addChars cols chrs mp
    where mp = initChars "SENDMOREMONEY"
          (cols, chrs) = pairColumns ["SEND","MORE"] "MONEY"
